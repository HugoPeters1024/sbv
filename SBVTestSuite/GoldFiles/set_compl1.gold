** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has sets, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s1 () (Array String Bool) (store (store (store (store ((as const (Array String Bool)) false) (_ char #x6f) true) (_ char #x6c) true) (_ char #x68) true) (_ char #x65) true))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Array String Bool)) ; tracks user variable "a"
[GOOD] (assert (forall ((set0 String)) (=> (select s0 set0) (= 1 (str.len set0)))))
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- preQuantifier assignments ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] ; --- arrayDelayeds ---
[GOOD] ; --- arraySetups ---
[GOOD] ; --- formula ---
[GOOD] ; --- postQuantifier assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; -- finalAssert ---
[GOOD] (assert s2)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (store (store (store (store ((as const (Array String Bool)) false) "h" true)
                            "o"
                            true)
                     "l"
                     true)
              "e"
              true)))
[GOOD] (define-fun s3 () (Array String Bool) (complement s0))
[SEND] (get-value (s3))
[RECV] ((s3 (lambda ((x!1 String))
         (not (or (= x!1 "e") (= x!1 "l") (= x!1 "o") (= x!1 "h"))))))
[GOOD] (define-fun s4 () (Array String Bool) (complement s3))
[SEND] (get-value (s4))
[RECV] ((s4 (store (store (store (store ((as const (Array String Bool)) false) "h" true)
                            "o"
                            true)
                     "l"
                     true)
              "e"
              true)))
[GOOD] (define-fun s5 () (Array String Bool) (intersection s3 s0))
[SEND] (get-value (s5))
[RECV] ((s5 ((as const (Array String Bool)) false)))
[GOOD] (define-fun s6 () (Array String Bool) (union s3 s0))
[SEND] (get-value (s6))
[RECV] ((s6 (lambda ((x!1 String))
         (or (not (or (= x!1 "e") (= x!1 "l") (= x!1 "o") (= x!1 "h")))
             (= x!1 "e")
             (= x!1 "l")
             (= x!1 "o")
             (= x!1 "h")))))
*** Solver   : Z3
*** Exit code: ExitSuccess

FINAL:
({'e','h','l','o'},U - {'e','h','l','o'},{'e','h','l','o'},{},U)
DONE!
