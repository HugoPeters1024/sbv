** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 8)) ; tracks user variable "a"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s1 () String (seq.unit s0))
[GOOD] (define-fun s2 () Bool (str.in.re s1 (re.++ (re.range "a" "z") (re.* (re.union (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9") (str.to.re "_") (str.to.re "'"))))))
[GOOD] (assert s2)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x63))
[GOOD] (define-fun s3 () (Array (_ BitVec 8) Bool) ((as const (Array (_ BitVec 8) Bool)) false))
[GOOD] (define-fun s4 () (Array (_ BitVec 8) Bool) (store s3 s0 true))
[GOOD] (define-fun s5 () (Array (_ BitVec 8) Bool) ((_ map not) s4))
[SEND] (get-value (s5))
[RECV] ((s5 (store ((as const (Array (_ BitVec 8) Bool)) true) #x63 false)))
[GOOD] (define-fun s6 () (Array (_ BitVec 8) Bool) ((_ map not) s5))
[SEND] (get-value (s6))
[RECV] ((s6 (store ((as const (Array (_ BitVec 8) Bool)) false) #x63 true)))
[GOOD] (define-fun s7 () (Array (_ BitVec 8) Bool) ((_ map and) s5 s4))
[SEND] (get-value (s7))
[RECV] ((s7 ((as const (Array (_ BitVec 8) Bool)) false)))
[GOOD] (define-fun s8 () (Array (_ BitVec 8) Bool) ((_ map or) s5 s4))
[SEND] (get-value (s8))
[RECV] ((s8 ((as const (Array (_ BitVec 8) Bool)) true)))
*** Solver   : Z3
*** Exit code: ExitSuccess

FINAL:
('c',U - {'c'},{'c'},{},U)
DONE!
