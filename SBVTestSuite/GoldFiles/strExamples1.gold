** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () Int 1)
[GOOD] (define-fun s3 () Int 0)
[GOOD] (define-fun s13 () Int 3)
[GOOD] (define-fun s16 () Int 2)
[GOOD] (define-fun s0 () String "abc")
[GOOD] (define-fun s6 () String "ba")
[GOOD] (define-fun s8 () String "abcabc")
[GOOD] (define-fun s9 () String "a")
[GOOD] (define-fun s15 () String "xxabcyy")
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () String (str.at s0 s1))
[GOOD] (define-fun s4 () String (str.at s0 s3))
[GOOD] (define-fun s5 () String (str.++ s2 s4))
[GOOD] (define-fun s7 () Bool (= s5 s6))
[GOOD] (define-fun s10 () Int (str.indexof s8 s9))
[GOOD] (define-fun s11 () Bool (= s3 s10))
[GOOD] (define-fun s12 () Int (str.indexof s8 s9 s1))
[GOOD] (define-fun s14 () Bool (= s12 s13))
[GOOD] (define-fun s17 () String (str.substr s15 s16 s13))
[GOOD] (define-fun s18 () Bool (= s0 s17))
[GOOD] (define-fun s19 () Bool (and s14 s18))
[GOOD] (define-fun s20 () Bool (and s11 s19))
[GOOD] (define-fun s21 () Bool (and s7 s20))
[GOOD] (assert s21)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
