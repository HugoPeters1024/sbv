** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] (declare-fun s1 () (Seq Int))
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- preQuantifier assignments ---
[GOOD] ; --- arrayDelayeds ---
[GOOD] ; --- arraySetups ---
[GOOD] ; --- formula ---
[GOOD] ; --- postQuantifier assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; -- finalAssert ---
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] (define-fun s2 () Int 0)
[GOOD] (define-fun s5 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] (define-fun s14 () Int 5)
[GOOD] (define-fun s3 () Int (seq.len s1))
[GOOD] (define-fun s4 () Bool (<= s3 s2))
[GOOD] (define-fun s6 () Int (seq.len s0))
[GOOD] (define-fun s7 () Bool (>= s3 s6))
[GOOD] (define-fun s8 () (Seq Int) (seq.extract s0 s2 s3))
[GOOD] (define-fun s9 () (Seq Int) (ite s7 s0 s8))
[GOOD] (define-fun s10 () (Seq Int) (ite s4 s5 s9))
[GOOD] (define-fun s11 () (Seq (SBVTuple2 Int Int)) (seq.mapi (lambda ((l1_s0 Int) (l1_s1 Int))
          (let ((l1_s2 ((as mkSBVTuple2 (SBVTuple2 Int Int)) l1_s0 l1_s1)))
          l1_s2)) s2 s10))
[GOOD] (define-fun s12 () (Seq (SBVTuple2 Int Int)) (seq.map (lambda ((l1_s0 (SBVTuple2 Int Int)))
          (let ((l1_s1 (proj_2_SBVTuple2 l1_s0)))
          (let ((l1_s2 (proj_1_SBVTuple2 l1_s0)))
          (let ((l1_s3 (seq.nth s1 l1_s2)))
          (let ((l1_s4 ((as mkSBVTuple2 (SBVTuple2 Int Int)) l1_s1 l1_s3)))
          l1_s4))))) s11))
[GOOD] (define-fun s13 () Int (seq.len s12))
[GOOD] (define-fun s15 () Bool (= s13 s14))
[GOOD] (assert s15)
[GOOD] (define-fun s16 () Bool (= s6 s14))
[GOOD] (assert s16)
[GOOD] (define-fun s17 () Bool (= s3 s14))
[GOOD] (assert s17)
[GOOD] (define-fun s18 () Bool (seq.foldl (lambda ((l1_s0 Bool) (l1_s1 Int))
          (let ((l1_s2 1))
          (let ((l1_s3 (= l1_s1 l1_s2)))
          (let ((l1_s4 (and l1_s0 l1_s3)))
          l1_s4)))) true s0))
[GOOD] (assert s18)
[GOOD] (define-fun s19 () Bool (seq.foldl (lambda ((l1_s0 Bool) (l1_s1 Int))
          (let ((l1_s2 2))
          (let ((l1_s3 (= l1_s1 l1_s2)))
          (let ((l1_s4 (and l1_s0 l1_s3)))
          l1_s4)))) true s1))
[GOOD] (assert s19)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 1) (seq.unit 1) (seq.unit 1) (seq.unit 1) (seq.unit 1))))
[SEND] (get-value (s1))
[RECV] ((s1 (seq.++ (seq.unit 2) (seq.unit 2) (seq.unit 2) (seq.unit 2) (seq.unit 2))))
*** Solver   : Z3
*** Exit code: ExitSuccess
