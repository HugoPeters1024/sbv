** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has user-defined sorts, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] (declare-sort B 0)  ; N.B. Uninterpreted sort.
[GOOD] (declare-fun B_witness () B)
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () B) ; tracks user variable "p"
[GOOD] (declare-fun s1 () B) ; tracks user variable "q"
[GOOD] (declare-fun s2 () B) ; tracks user variable "r"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- preQuantifier assignments ---
[GOOD] ; --- arrayDelayeds ---
[GOOD] ; --- arraySetups ---
[GOOD] ; --- formula ---
[GOOD] ; --- postQuantifier assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; -- finalAssert ---
[GOOD] (declare-fun AND (B B) B)
[GOOD] (declare-fun NOT (B) B)
[GOOD] (declare-fun OR (B B) B)
[GOOD] (define-fun s3 () B (AND s1 s2))
[GOOD] (define-fun s4 () B (OR s0 s3))
[GOOD] (define-fun s5 () B (NOT s4))
[GOOD] (define-fun s6 () B (NOT s0))
[GOOD] (define-fun s7 () B (NOT s1))
[GOOD] (define-fun s8 () B (AND s6 s7))
[GOOD] (define-fun s9 () B (NOT s2))
[GOOD] (define-fun s10 () B (AND s6 s9))
[GOOD] (define-fun s11 () B (OR s8 s10))
[GOOD] (define-fun s12 () Bool (distinct s5 s11))
[GOOD] (assert s12)
[GOOD] ; -- user given axiom: OR distributes over AND
[GOOD] (assert (forall ((s0 B) (s1 B) (s2 B))
                  (let ((s3 (OR s0 s1)))
                  (let ((s4 (OR s0 s2)))
                  (let ((s5 (AND s3 s4)))
                  (let ((s6 (AND s1 s2)))
                  (let ((s7 (OR s0 s6)))
                  (let ((s8 (= s5 s7)))
                  s8))))))))
[GOOD] ; -- user given axiom: de Morgan
[GOOD] (assert (forall ((s0 B) (s1 B))
                  (let ((s2 (OR s0 s1)))
                  (let ((s3 (NOT s2)))
                  (let ((s4 (NOT s0)))
                  (let ((s5 (NOT s1)))
                  (let ((s6 (AND s4 s5)))
                  (let ((s7 (= s3 s6)))
                  s7))))))))
[GOOD] ; -- user given axiom: double negation
[GOOD] (assert (forall ((s0 B))
                  (let ((s1 (NOT s0)))
                  (let ((s2 (NOT s1)))
                  (let ((s3 (= s0 s2)))
                  s3)))))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL:Unsat
DONE!
