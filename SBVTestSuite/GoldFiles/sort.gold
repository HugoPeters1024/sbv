** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s14 () Int 1)
[GOOD] (define-fun s21 () Int 0)
[GOOD] (define-fun s12 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] (declare-fun s19 () Int) ; tracks user variable "__internal_sbv_s19"
[GOOD] (declare-fun s36 () Int) ; tracks user variable "__internal_sbv_s36"
[GOOD] (declare-fun s44 () Int) ; tracks user variable "__internal_sbv_s44"
[GOOD] (declare-fun s58 () Int) ; tracks user variable "__internal_sbv_s58"
[GOOD] (declare-fun s72 () Int) ; tracks user variable "__internal_sbv_s72"
[GOOD] (declare-fun s96 () Int) ; tracks user variable "__internal_sbv_s96"
[GOOD] (declare-fun s103 () Int) ; tracks user variable "__internal_sbv_s103"
[GOOD] (declare-fun s117 () Int) ; tracks user variable "__internal_sbv_s117"
[GOOD] (declare-fun s131 () Int) ; tracks user variable "__internal_sbv_s131"
[GOOD] (declare-fun s155 () Int) ; tracks user variable "__internal_sbv_s155"
[GOOD] (declare-fun s162 () Int) ; tracks user variable "__internal_sbv_s162"
[GOOD] (declare-fun s176 () Int) ; tracks user variable "__internal_sbv_s176"
[GOOD] (declare-fun s190 () Int) ; tracks user variable "__internal_sbv_s190"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (<= s0 s1))
[GOOD] (define-fun s4 () Bool (<= s1 s2))
[GOOD] (define-fun s5 () Bool (and s3 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s8 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s9 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s10 () (Seq Int) (seq.++ s8 s9))
[GOOD] (define-fun s11 () (Seq Int) (seq.++ s7 s10))
[GOOD] (define-fun s13 () Bool (= s11 s12))
[GOOD] (define-fun s15 () Int (seq.len s11))
[GOOD] (define-fun s16 () Int (- s15 s14))
[GOOD] (define-fun s17 () (Seq Int) (seq.extract s11 s14 s16))
[GOOD] (define-fun s18 () Bool (= s12 s17))
[GOOD] (define-fun s20 () (Seq Int) (seq.unit s19))
[GOOD] (define-fun s22 () Bool (> s15 s21))
[GOOD] (define-fun s23 () Bool (not s22))
[GOOD] (define-fun s24 () (Seq Int) (seq.extract s11 s21 s14))
[GOOD] (define-fun s25 () Bool (= s20 s24))
[GOOD] (define-fun s26 () Bool (or s23 s25))
[GOOD] (define-fun s27 () Int (seq.len s17))
[GOOD] (define-fun s28 () Int (- s27 s14))
[GOOD] (define-fun s29 () (Seq Int) (seq.extract s17 s14 s28))
[GOOD] (define-fun s30 () Bool (= s12 s29))
[GOOD] (define-fun s31 () Int (seq.len s29))
[GOOD] (define-fun s32 () Int (- s31 s14))
[GOOD] (define-fun s33 () (Seq Int) (seq.extract s29 s14 s32))
[GOOD] (define-fun s34 () Bool (= s12 s33))
[GOOD] (define-fun s35 () Bool (= s12 s20))
[GOOD] (define-fun s37 () (Seq Int) (seq.unit s36))
[GOOD] (define-fun s38 () Int (seq.len s33))
[GOOD] (define-fun s39 () Bool (> s38 s21))
[GOOD] (define-fun s40 () Bool (not s39))
[GOOD] (define-fun s41 () (Seq Int) (seq.extract s33 s21 s14))
[GOOD] (define-fun s42 () Bool (= s37 s41))
[GOOD] (define-fun s43 () Bool (or s40 s42))
[GOOD] (define-fun s45 () (Seq Int) (seq.unit s44))
[GOOD] (define-fun s46 () Int (seq.len s20))
[GOOD] (define-fun s47 () Bool (> s46 s21))
[GOOD] (define-fun s48 () Bool (not s47))
[GOOD] (define-fun s49 () (Seq Int) (seq.extract s20 s21 s14))
[GOOD] (define-fun s50 () Bool (= s45 s49))
[GOOD] (define-fun s51 () Bool (or s48 s50))
[GOOD] (define-fun s52 () Bool (< s36 s44))
[GOOD] (define-fun s53 () Int (- s46 s14))
[GOOD] (define-fun s54 () (Seq Int) (seq.extract s20 s14 s53))
[GOOD] (define-fun s55 () (Seq Int) (seq.++ s45 s54))
[GOOD] (define-fun s56 () (Seq Int) (seq.++ s37 s55))
[GOOD] (define-fun s57 () Bool (= s12 s54))
[GOOD] (define-fun s59 () (Seq Int) (seq.unit s58))
[GOOD] (define-fun s60 () Int (seq.len s54))
[GOOD] (define-fun s61 () Bool (> s60 s21))
[GOOD] (define-fun s62 () Bool (not s61))
[GOOD] (define-fun s63 () (Seq Int) (seq.extract s54 s21 s14))
[GOOD] (define-fun s64 () Bool (= s59 s63))
[GOOD] (define-fun s65 () Bool (or s62 s64))
[GOOD] (define-fun s66 () Bool (< s36 s58))
[GOOD] (define-fun s67 () Int (- s60 s14))
[GOOD] (define-fun s68 () (Seq Int) (seq.extract s54 s14 s67))
[GOOD] (define-fun s69 () (Seq Int) (seq.++ s59 s68))
[GOOD] (define-fun s70 () (Seq Int) (seq.++ s37 s69))
[GOOD] (define-fun s71 () Bool (= s12 s68))
[GOOD] (define-fun s73 () (Seq Int) (seq.unit s72))
[GOOD] (define-fun s74 () Int (seq.len s68))
[GOOD] (define-fun s75 () Bool (> s74 s21))
[GOOD] (define-fun s76 () Bool (not s75))
[GOOD] (define-fun s77 () (Seq Int) (seq.extract s68 s21 s14))
[GOOD] (define-fun s78 () Bool (= s73 s77))
[GOOD] (define-fun s79 () Bool (or s76 s78))
[GOOD] (define-fun s80 () Bool (< s36 s72))
[GOOD] (define-fun s81 () Int (- s74 s14))
[GOOD] (define-fun s82 () (Seq Int) (seq.extract s68 s14 s81))
[GOOD] (define-fun s83 () (Seq Int) (seq.++ s73 s82))
[GOOD] (define-fun s84 () (Seq Int) (seq.++ s37 s83))
[GOOD] (define-fun s85 () (Seq Int) (seq.++ s73 s37))
[GOOD] (define-fun s86 () (Seq Int) (ite s80 s84 s85))
[GOOD] (define-fun s87 () (Seq Int) (ite s71 s37 s86))
[GOOD] (define-fun s88 () (Seq Int) (seq.++ s59 s87))
[GOOD] (define-fun s89 () (Seq Int) (ite s66 s70 s88))
[GOOD] (define-fun s90 () (Seq Int) (ite s57 s37 s89))
[GOOD] (define-fun s91 () (Seq Int) (seq.++ s45 s90))
[GOOD] (define-fun s92 () (Seq Int) (ite s52 s56 s91))
[GOOD] (define-fun s93 () (Seq Int) (ite s35 s37 s92))
[GOOD] (define-fun s94 () (Seq Int) (ite s34 s20 s93))
[GOOD] (define-fun s95 () Bool (= s12 s94))
[GOOD] (define-fun s97 () (Seq Int) (seq.unit s96))
[GOOD] (define-fun s98 () Bool (> s31 s21))
[GOOD] (define-fun s99 () Bool (not s98))
[GOOD] (define-fun s100 () (Seq Int) (seq.extract s29 s21 s14))
[GOOD] (define-fun s101 () Bool (= s97 s100))
[GOOD] (define-fun s102 () Bool (or s99 s101))
[GOOD] (define-fun s104 () (Seq Int) (seq.unit s103))
[GOOD] (define-fun s105 () Int (seq.len s94))
[GOOD] (define-fun s106 () Bool (> s105 s21))
[GOOD] (define-fun s107 () Bool (not s106))
[GOOD] (define-fun s108 () (Seq Int) (seq.extract s94 s21 s14))
[GOOD] (define-fun s109 () Bool (= s104 s108))
[GOOD] (define-fun s110 () Bool (or s107 s109))
[GOOD] (define-fun s111 () Bool (< s96 s103))
[GOOD] (define-fun s112 () Int (- s105 s14))
[GOOD] (define-fun s113 () (Seq Int) (seq.extract s94 s14 s112))
[GOOD] (define-fun s114 () (Seq Int) (seq.++ s104 s113))
[GOOD] (define-fun s115 () (Seq Int) (seq.++ s97 s114))
[GOOD] (define-fun s116 () Bool (= s12 s113))
[GOOD] (define-fun s118 () (Seq Int) (seq.unit s117))
[GOOD] (define-fun s119 () Int (seq.len s113))
[GOOD] (define-fun s120 () Bool (> s119 s21))
[GOOD] (define-fun s121 () Bool (not s120))
[GOOD] (define-fun s122 () (Seq Int) (seq.extract s113 s21 s14))
[GOOD] (define-fun s123 () Bool (= s118 s122))
[GOOD] (define-fun s124 () Bool (or s121 s123))
[GOOD] (define-fun s125 () Bool (< s96 s117))
[GOOD] (define-fun s126 () Int (- s119 s14))
[GOOD] (define-fun s127 () (Seq Int) (seq.extract s113 s14 s126))
[GOOD] (define-fun s128 () (Seq Int) (seq.++ s118 s127))
[GOOD] (define-fun s129 () (Seq Int) (seq.++ s97 s128))
[GOOD] (define-fun s130 () Bool (= s12 s127))
[GOOD] (define-fun s132 () (Seq Int) (seq.unit s131))
[GOOD] (define-fun s133 () Int (seq.len s127))
[GOOD] (define-fun s134 () Bool (> s133 s21))
[GOOD] (define-fun s135 () Bool (not s134))
[GOOD] (define-fun s136 () (Seq Int) (seq.extract s127 s21 s14))
[GOOD] (define-fun s137 () Bool (= s132 s136))
[GOOD] (define-fun s138 () Bool (or s135 s137))
[GOOD] (define-fun s139 () Bool (< s96 s131))
[GOOD] (define-fun s140 () Int (- s133 s14))
[GOOD] (define-fun s141 () (Seq Int) (seq.extract s127 s14 s140))
[GOOD] (define-fun s142 () (Seq Int) (seq.++ s132 s141))
[GOOD] (define-fun s143 () (Seq Int) (seq.++ s97 s142))
[GOOD] (define-fun s144 () (Seq Int) (seq.++ s132 s97))
[GOOD] (define-fun s145 () (Seq Int) (ite s139 s143 s144))
[GOOD] (define-fun s146 () (Seq Int) (ite s130 s97 s145))
[GOOD] (define-fun s147 () (Seq Int) (seq.++ s118 s146))
[GOOD] (define-fun s148 () (Seq Int) (ite s125 s129 s147))
[GOOD] (define-fun s149 () (Seq Int) (ite s116 s97 s148))
[GOOD] (define-fun s150 () (Seq Int) (seq.++ s104 s149))
[GOOD] (define-fun s151 () (Seq Int) (ite s111 s115 s150))
[GOOD] (define-fun s152 () (Seq Int) (ite s95 s97 s151))
[GOOD] (define-fun s153 () (Seq Int) (ite s30 s20 s152))
[GOOD] (define-fun s154 () Bool (= s12 s153))
[GOOD] (define-fun s156 () (Seq Int) (seq.unit s155))
[GOOD] (define-fun s157 () Bool (> s27 s21))
[GOOD] (define-fun s158 () Bool (not s157))
[GOOD] (define-fun s159 () (Seq Int) (seq.extract s17 s21 s14))
[GOOD] (define-fun s160 () Bool (= s156 s159))
[GOOD] (define-fun s161 () Bool (or s158 s160))
[GOOD] (define-fun s163 () (Seq Int) (seq.unit s162))
[GOOD] (define-fun s164 () Int (seq.len s153))
[GOOD] (define-fun s165 () Bool (> s164 s21))
[GOOD] (define-fun s166 () Bool (not s165))
[GOOD] (define-fun s167 () (Seq Int) (seq.extract s153 s21 s14))
[GOOD] (define-fun s168 () Bool (= s163 s167))
[GOOD] (define-fun s169 () Bool (or s166 s168))
[GOOD] (define-fun s170 () Bool (< s155 s162))
[GOOD] (define-fun s171 () Int (- s164 s14))
[GOOD] (define-fun s172 () (Seq Int) (seq.extract s153 s14 s171))
[GOOD] (define-fun s173 () (Seq Int) (seq.++ s163 s172))
[GOOD] (define-fun s174 () (Seq Int) (seq.++ s156 s173))
[GOOD] (define-fun s175 () Bool (= s12 s172))
[GOOD] (define-fun s177 () (Seq Int) (seq.unit s176))
[GOOD] (define-fun s178 () Int (seq.len s172))
[GOOD] (define-fun s179 () Bool (> s178 s21))
[GOOD] (define-fun s180 () Bool (not s179))
[GOOD] (define-fun s181 () (Seq Int) (seq.extract s172 s21 s14))
[GOOD] (define-fun s182 () Bool (= s177 s181))
[GOOD] (define-fun s183 () Bool (or s180 s182))
[GOOD] (define-fun s184 () Bool (< s155 s176))
[GOOD] (define-fun s185 () Int (- s178 s14))
[GOOD] (define-fun s186 () (Seq Int) (seq.extract s172 s14 s185))
[GOOD] (define-fun s187 () (Seq Int) (seq.++ s177 s186))
[GOOD] (define-fun s188 () (Seq Int) (seq.++ s156 s187))
[GOOD] (define-fun s189 () Bool (= s12 s186))
[GOOD] (define-fun s191 () (Seq Int) (seq.unit s190))
[GOOD] (define-fun s192 () Int (seq.len s186))
[GOOD] (define-fun s193 () Bool (> s192 s21))
[GOOD] (define-fun s194 () Bool (not s193))
[GOOD] (define-fun s195 () (Seq Int) (seq.extract s186 s21 s14))
[GOOD] (define-fun s196 () Bool (= s191 s195))
[GOOD] (define-fun s197 () Bool (or s194 s196))
[GOOD] (define-fun s198 () Bool (< s155 s190))
[GOOD] (define-fun s199 () Int (- s192 s14))
[GOOD] (define-fun s200 () (Seq Int) (seq.extract s186 s14 s199))
[GOOD] (define-fun s201 () (Seq Int) (seq.++ s191 s200))
[GOOD] (define-fun s202 () (Seq Int) (seq.++ s156 s201))
[GOOD] (define-fun s203 () (Seq Int) (seq.++ s191 s156))
[GOOD] (define-fun s204 () (Seq Int) (ite s198 s202 s203))
[GOOD] (define-fun s205 () (Seq Int) (ite s189 s156 s204))
[GOOD] (define-fun s206 () (Seq Int) (seq.++ s177 s205))
[GOOD] (define-fun s207 () (Seq Int) (ite s184 s188 s206))
[GOOD] (define-fun s208 () (Seq Int) (ite s175 s156 s207))
[GOOD] (define-fun s209 () (Seq Int) (seq.++ s163 s208))
[GOOD] (define-fun s210 () (Seq Int) (ite s170 s174 s209))
[GOOD] (define-fun s211 () (Seq Int) (ite s154 s156 s210))
[GOOD] (define-fun s212 () (Seq Int) (ite s18 s20 s211))
[GOOD] (define-fun s213 () (Seq Int) (ite s13 s12 s212))
[GOOD] (define-fun s214 () Bool (= s11 s213))
[GOOD] (define-fun s215 () Bool (or s6 s214))
[GOOD] (define-fun s216 () Bool (<= s0 s2))
[GOOD] (define-fun s217 () Bool (<= s2 s1))
[GOOD] (define-fun s218 () Bool (and s216 s217))
[GOOD] (define-fun s219 () Bool (not s218))
[GOOD] (define-fun s220 () (Seq Int) (seq.++ s9 s8))
[GOOD] (define-fun s221 () (Seq Int) (seq.++ s7 s220))
[GOOD] (define-fun s222 () Bool (= s213 s221))
[GOOD] (define-fun s223 () Bool (or s219 s222))
[GOOD] (define-fun s224 () Bool (<= s1 s0))
[GOOD] (define-fun s225 () Bool (and s216 s224))
[GOOD] (define-fun s226 () Bool (not s225))
[GOOD] (define-fun s227 () (Seq Int) (seq.++ s7 s9))
[GOOD] (define-fun s228 () (Seq Int) (seq.++ s8 s227))
[GOOD] (define-fun s229 () Bool (= s213 s228))
[GOOD] (define-fun s230 () Bool (or s226 s229))
[GOOD] (define-fun s231 () Bool (<= s2 s0))
[GOOD] (define-fun s232 () Bool (and s4 s231))
[GOOD] (define-fun s233 () Bool (not s232))
[GOOD] (define-fun s234 () (Seq Int) (seq.++ s9 s7))
[GOOD] (define-fun s235 () (Seq Int) (seq.++ s8 s234))
[GOOD] (define-fun s236 () Bool (= s213 s235))
[GOOD] (define-fun s237 () Bool (or s233 s236))
[GOOD] (define-fun s238 () Bool (and s3 s231))
[GOOD] (define-fun s239 () Bool (not s238))
[GOOD] (define-fun s240 () (Seq Int) (seq.++ s7 s8))
[GOOD] (define-fun s241 () (Seq Int) (seq.++ s9 s240))
[GOOD] (define-fun s242 () Bool (= s213 s241))
[GOOD] (define-fun s243 () Bool (or s239 s242))
[GOOD] (define-fun s244 () Bool (and s217 s224))
[GOOD] (define-fun s245 () Bool (not s244))
[GOOD] (define-fun s246 () (Seq Int) (seq.++ s8 s7))
[GOOD] (define-fun s247 () (Seq Int) (seq.++ s9 s246))
[GOOD] (define-fun s248 () Bool (= s213 s247))
[GOOD] (define-fun s249 () Bool (or s245 s248))
[GOOD] (assert s26)
[GOOD] (assert s43)
[GOOD] (assert s51)
[GOOD] (assert s65)
[GOOD] (assert s79)
[GOOD] (assert s102)
[GOOD] (assert s110)
[GOOD] (assert s124)
[GOOD] (assert s138)
[GOOD] (assert s161)
[GOOD] (assert s169)
[GOOD] (assert s183)
[GOOD] (assert s197)
[GOOD] (assert s215)
[GOOD] (assert s223)
[GOOD] (assert s230)
[GOOD] (assert s237)
[GOOD] (assert s243)
[GOOD] (assert s249)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
