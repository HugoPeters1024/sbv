** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s1 () Int 21)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Bool)
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ;; -- user given: isEvenOdd [Recursive]
[GOOD] (define-fun-rec isEvenOdd ((l1_s0 Int)) (SBVTuple2 Bool Bool)
                          (let ((l1_s1 0))
                          (let ((l1_s6 (mkSBVTuple2 true false)))
                          (let ((l1_s7 1))
                          (let ((l1_s2 (< l1_s0 l1_s1)))
                          (let ((l1_s3 (- l1_s0)))
                          (let ((l1_s4 (isEvenOdd l1_s3)))
                          (let ((l1_s5 (= l1_s0 l1_s1)))
                          (let ((l1_s8 (- l1_s0 l1_s7)))
                          (let ((l1_s9 (isEvenOdd l1_s8)))
                          (let ((l1_s10 (proj_2_SBVTuple2 l1_s9)))
                          (let ((l1_s11 (proj_1_SBVTuple2 l1_s9)))
                          (let ((l1_s12 ((as mkSBVTuple2 (SBVTuple2 Bool Bool)) l1_s10 l1_s11)))
                          (let ((l1_s13 (ite l1_s5 l1_s6 l1_s12)))
                          (let ((l1_s14 (ite l1_s2 l1_s4 l1_s13)))
                          l1_s14)))))))))))))))
[GOOD] ; --- preQuantifier assignments ---
[GOOD] (define-fun s2 () (SBVTuple2 Bool Bool) (isEvenOdd s1))
[GOOD] (define-fun s3 () Bool (proj_1_SBVTuple2 s2))
[GOOD] (define-fun s4 () Bool (= s0 s3))
[GOOD] ; --- arrayDelayeds ---
[GOOD] ; --- arraySetups ---
[GOOD] ; --- formula ---
[GOOD] ; --- postQuantifier assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; -- finalAssert ---
[GOOD] (assert s4)
[GOOD] (declare-fun s5 () Bool)
[GOOD] (define-fun s6 () Bool (= s3 s5))
[GOOD] (assert s6)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 false))
[SEND] (get-value (s5))
[RECV] ((s5 false))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 = False :: Bool
  s5 = False :: Bool
