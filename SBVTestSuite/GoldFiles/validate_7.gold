** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ FloatingPoint  8 24)) ; tracks user variable "x"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms and definitions ---
[GOOD] ; --- preQuantifier assignments ---
[GOOD] (define-fun s1 () Bool (forall ((l1_s0 (_ FloatingPoint  8 24)))
         (let ((l1_s1 (fp.isNaN l1_s0)))
         (let ((l1_s2 (fp.isInfinite l1_s0)))
         (let ((l1_s3 (or l1_s1 l1_s2)))
         (let ((l1_s4 (not l1_s3)))
         (let ((l1_s5 (not l1_s4)))
         (let ((l1_s6 (fp.leq s0 l1_s0)))
         (let ((l1_s7 (or l1_s5 l1_s6)))
         l1_s7)))))))))
[GOOD] ; --- arrayDelayeds ---
[GOOD] ; --- arraySetups ---
[GOOD] ; --- formula ---
[GOOD] ; --- postQuantifier assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; -- finalAssert ---
[GOOD] (assert s1)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (_ -oo 8 24)))
*** Solver   : Z3
*** Exit code: ExitSuccess
[VALIDATE] Validating the model. Assignment:
[VALIDATE]       x = -Infinity :: Float
[VALIDATE] There are no constraints to check.
[VALIDATE] Validating outputs.

FINAL OUTPUT:
*** Data.SBV: Cannot validate the model, since s1 is not concretely computable.
*** 
*** Assignment:
*** 
***       x = -Infinity :: Float
*** 
*** The value depends on a quantified variable.
*** 
*** SBV's model validator is incomplete, and cannot handle this particular case.
*** Please report this as a feature request or possibly a bug!
***
*** Alleged model:
***
*** Satisfiable. Model:
***   x = -Infinity :: Float
