** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq (Seq Int)))
[GOOD] (declare-fun s1 () Int)
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- preQuantifier assignments ---
[GOOD] ; --- arrayDelayeds ---
[GOOD] ; --- arraySetups ---
[GOOD] ; --- formula ---
[GOOD] ; --- postQuantifier assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; -- finalAssert ---
[GOOD] (define-fun s2 () (Seq (Seq Int)) (seq.++ (seq.unit (seq.++ (seq.unit 1) (seq.unit 1) (seq.unit 1) (seq.unit 1) (seq.unit 1))) (seq.unit (seq.++ (seq.unit 1) (seq.unit 1) (seq.unit 1) (seq.unit 1) (seq.unit 1))) (seq.unit (seq.++ (seq.unit 1) (seq.unit 1) (seq.unit 1) (seq.unit 1) (seq.unit 1))) (seq.unit (seq.++ (seq.unit 1) (seq.unit 1) (seq.unit 1) (seq.unit 1) (seq.unit 1))) (seq.unit (seq.++ (seq.unit 1) (seq.unit 1) (seq.unit 1) (seq.unit 1) (seq.unit 1)))))
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] (assert s3)
[GOOD] (define-fun s4 () Int 0)
[GOOD] (define-fun s5 () (Seq Int) (seq.map (lambda ((l1_s0 (Seq Int)))
          (let ((l1_s1 0))
          (let ((l1_s2 (seq.foldl (lambda ((l2_s0 Int) (l2_s1 Int))
          (let ((l2_s2 (+ l2_s0 l2_s1)))
          l2_s2)) l1_s1 l1_s0)))
          l1_s2))) s0))
[GOOD] (define-fun s6 () Int (seq.foldl (lambda ((l1_s0 Int) (l1_s1 Int))
          (let ((l1_s2 (+ l1_s0 l1_s1)))
          l1_s2)) s4 s5))
[GOOD] (define-fun s7 () Bool (= s1 s6))
[GOOD] (assert s7)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s1))
[RECV] ((s1 25))
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit (seq.++ (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)))
               (seq.unit (seq.++ (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)))
               (seq.unit (seq.++ (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)))
               (seq.unit (seq.++ (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)))
               (seq.unit (seq.++ (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1)
                                 (seq.unit 1))))))
*** Solver   : Z3
*** Exit code: ExitSuccess
