** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s1 () (Seq Int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- preQuantifier assignments ---
[GOOD] (define-fun s2 () (Seq Int) (seq.map (lambda ((s0 Int))
          (let ((s1 (* s0 s0)))
          (let ((s2 (+ s0 s1)))
          (let ((s3 (* s0 s1)))
          (let ((s4 (+ s2 s3)))
          (let ((s5 (* s1 s1)))
          (let ((s6 (+ s4 s5)))
          (let ((s7 (* s0 s5)))
          (let ((s8 (+ s6 s7)))
          (let ((s9 (* s1 s5)))
          (let ((s10 (+ s8 s9)))
          (let ((s11 (* s0 s9)))
          (let ((s12 (+ s10 s11)))
          (let ((s13 (* s5 s5)))
          (let ((s14 (+ s12 s13)))
          (let ((s15 (* s0 s13)))
          (let ((s16 (+ s14 s15)))
          (let ((s17 (* s1 s13)))
          (let ((s18 (+ s16 s17)))
          s18))))))))))))))))))) s1))
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] ; --- arrayDelayeds ---
[GOOD] ; --- arraySetups ---
[GOOD] ; --- formula ---
[GOOD] ; --- postQuantifier assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; -- finalAssert ---
[GOOD] (assert s3)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 10)
               (seq.unit 2046)
               (seq.unit 88572)
               (seq.unit 1398100)
               (seq.unit 12207030))))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
Satisfiable. Model:
  s0 = [10,2046,88572,1398100,12207030] :: [Integer]
