** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s1 () Int 2)
[GOOD] (define-fun s3 () Int 12)
[GOOD] (define-fun s5 () Int 3)
[GOOD] (define-fun s7 () Int 75)
[GOOD] (define-fun s9 () Int (- 3))
[GOOD] (define-fun s11 () Int 9)
[GOOD] (define-fun s14 () Int 1)
[GOOD] (define-fun s18 () Int 5)
[GOOD] (define-fun s20 () Int 7)
[GOOD] (define-fun s22 () Int 6)
[GOOD] (define-fun s30 () Int 121)
[GOOD] (define-fun s35 () Int 8)
[GOOD] (define-fun s60 () Int 21)
[GOOD] (define-fun s65 () Int 210)
[GOOD] (define-fun s26 () (_ FloatingPoint  8 24) ((_ to_fp 8 24) roundNearestTiesToEven (/ 4508877.0 524288.0)))
[GOOD] (define-fun s29 () (_ FloatingPoint  8 24) ((_ to_fp 8 24) roundNearestTiesToEven (/ 5033165.0 524288.0)))
[GOOD] (define-fun s37 () (_ FloatingPoint  8 24) (_ +oo 8 24))
[GOOD] (define-fun s42 () (_ FloatingPoint  8 24) ((_ to_fp 8 24) roundNearestTiesToEven (/ 78.0 1.0)))
[GOOD] (define-fun s46 () (_ FloatingPoint  8 24) ((_ to_fp 8 24) roundNearestTiesToEven (/ 92.0 1.0)))
[GOOD] (define-fun s51 () (_ FloatingPoint  8 24) ((_ to_fp 8 24) roundNearestTiesToEven (/ 7.0 2.0)))
[GOOD] (define-fun s39 () (_ BitVec 8) #x63)
[GOOD] (define-fun s48 () (_ BitVec 8) #x72)
[GOOD] (define-fun s40 () String "hey")
[GOOD] (define-fun s44 () String "tey")
[GOOD] (define-fun s49 () String "foo")
[GOOD] (define-fun s53 () (Seq Int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3)))
[GOOD] (define-fun s57 () (Seq Int) (seq.++ (seq.unit 9) (seq.unit 5)))
[GOOD] (define-fun s62 () (Seq Int) (seq.unit 5))
[GOOD] (define-fun s54 () (Seq (_ FloatingPoint  8 24)) (seq.++ (seq.unit ((_ to_fp 8 24) roundNearestTiesToEven (/ 8598323.0 1048576.0))) (seq.unit ((_ to_fp 8 24) roundNearestTiesToEven (/ 3.0 1.0)))))
[GOOD] (define-fun s58 () (Seq (_ FloatingPoint  8 24)) (seq.++ (seq.unit ((_ to_fp 8 24) roundNearestTiesToEven (/ 8598323.0 1048576.0))) (seq.unit ((_ to_fp 8 24) roundNearestTiesToEven (/ 9.0 1.0)))))
[GOOD] (define-fun s63 () (Seq (_ FloatingPoint  8 24)) (seq.++ (seq.unit ((_ to_fp 8 24) roundNearestTiesToEven (/ 8598323.0 1048576.0))) (seq.unit (_ +zero 8 24))))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int)
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] (declare-fun q1 (Int) Int)
[GOOD] (declare-fun q2 (Bool Int) Int)
[GOOD] (declare-fun q3 ((_ FloatingPoint  8 24) Bool Int) (_ FloatingPoint  8 24))
[GOOD] (declare-fun q4 ((_ BitVec 8) String) (_ FloatingPoint  8 24))
[GOOD] (declare-fun q5 ((Seq Int) (Seq (_ FloatingPoint  8 24))) Int)
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Int (q1 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () Int (q1 s5))
[GOOD] (define-fun s8 () Bool (= s6 s7))
[GOOD] (define-fun s10 () Int (q1 s9))
[GOOD] (define-fun s12 () Bool (= s10 s11))
[GOOD] (define-fun s13 () Int (q1 s0))
[GOOD] (define-fun s15 () Int (+ s0 s14))
[GOOD] (define-fun s16 () Bool (= s13 s15))
[GOOD] (define-fun s17 () Int (q2 true s5))
[GOOD] (define-fun s19 () Bool (= s17 s18))
[GOOD] (define-fun s21 () Int (q2 false s20))
[GOOD] (define-fun s23 () Bool (= s21 s22))
[GOOD] (define-fun s24 () Int (q2 false s3))
[GOOD] (define-fun s25 () Bool (= s5 s24))
[GOOD] (define-fun s27 () (_ FloatingPoint  8 24) (q3 s26 true s3))
[GOOD] (define-fun s28 () Bool (fp.eq s26 s27))
[GOOD] (define-fun s31 () (_ FloatingPoint  8 24) (q3 s29 true s30))
[GOOD] (define-fun s32 () Bool (fp.isZero s31))
[GOOD] (define-fun s33 () Bool (fp.isNegative s31))
[GOOD] (define-fun s34 () Bool (and s32 s33))
[GOOD] (define-fun s36 () (_ FloatingPoint  8 24) (q3 s29 false s35))
[GOOD] (define-fun s38 () Bool (fp.eq s36 s37))
[GOOD] (define-fun s41 () (_ FloatingPoint  8 24) (q4 s39 s40))
[GOOD] (define-fun s43 () Bool (fp.eq s41 s42))
[GOOD] (define-fun s45 () (_ FloatingPoint  8 24) (q4 s39 s44))
[GOOD] (define-fun s47 () Bool (fp.eq s45 s46))
[GOOD] (define-fun s50 () (_ FloatingPoint  8 24) (q4 s48 s49))
[GOOD] (define-fun s52 () Bool (fp.eq s50 s51))
[GOOD] (define-fun s55 () Int (q5 s53 s54))
[GOOD] (define-fun s56 () Bool (= s20 s55))
[GOOD] (define-fun s59 () Int (q5 s57 s58))
[GOOD] (define-fun s61 () Bool (= s59 s60))
[GOOD] (define-fun s64 () Int (q5 s62 s63))
[GOOD] (define-fun s66 () Bool (= s64 s65))
[GOOD] (assert s4)
[GOOD] (assert s8)
[GOOD] (assert s12)
[GOOD] (assert s16)
[GOOD] (assert s19)
[GOOD] (assert s23)
[GOOD] (assert s25)
[GOOD] (assert s28)
[GOOD] (assert s34)
[GOOD] (assert s38)
[GOOD] (assert s43)
[GOOD] (assert s47)
[GOOD] (assert s52)
[GOOD] (assert s56)
[GOOD] (assert s61)
[GOOD] (assert s66)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 0))
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[SEND] (get-value (q1))
[RECV] ((q1 (lambda ((x!1 Int))
         (ite (= x!1 0) 1 (ite (= x!1 (- 3)) 9 (ite (= x!1 3) 75 12))))))
[SEND] (get-value (q2))
[RECV] ((q2 (lambda ((x!1 Bool) (x!2 Int))
         (ite (and (not x!1) (= x!2 12)) 3 (ite (and (not x!1) (= x!2 7)) 6 5)))))
[SEND] (get-value (q3))
[RECV] ((q3 (lambda ((x!1 (_ FloatingPoint 8 24)) (x!2 Bool) (x!3 Int))
         (ite (and (= x!1 (fp #b0 #x82 #b00110011001100110011010)) (not x!2) (= x!3 8))
              (_ +oo 8 24)
              (ite (and (= x!1 (fp #b0 #x82 #b00110011001100110011010))
                        x!2
                        (= x!3 121))
                   (_ -zero 8 24)
                   (fp #b0 #x82 #b00010011001100110011010))))))
[SEND] (get-value (q4))
[RECV] ((q4 (lambda ((x!1 (_ BitVec 8)) (x!2 String))
         (ite (and (= x!1 #x72) (= x!2 "foo"))
              (fp #b0 #x80 #b11000000000000000000000)
              (ite (and (= x!1 #x63) (= x!2 "tey"))
                   (fp #b0 #x85 #b01110000000000000000000)
                   (fp #b0 #x85 #b00111000000000000000000))))))
[SEND] (get-value (q5))
[RECV] ((q5 (lambda ((x!1 (Seq Int)) (x!2 (Seq (_ FloatingPoint 8 24))))
         (ite (and (= x!1 (seq.unit 5))
                   (= x!2
                      (seq.++ (seq.unit (fp #b0 #x82 #b00000110011001100110011))
                              (seq.unit (_ +zero 8 24)))))
              210
              (ite (and (= x!1 (seq.++ (seq.unit 9) (seq.unit 5)))
                        (= x!2
                           (seq.++ (seq.unit (fp #b0 #x82 #b00000110011001100110011))
                                   (seq.unit (fp #b0 #x82 #b00100000000000000000000)))))
                   21
                   7)))))
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL:
Satisfiable. Model:
  s0 = 0 :: Integer

  q1 :: Integer -> Integer
  q1 0    = 1 
  q1 (-3) = 9 
  q1 3    = 75
  q1 _    = 12

  q2 :: Bool -> Integer -> Integer
  q2 False 12 = 3
  q2 False 7  = 6
  q2 _     _  = 5

  q3 :: Float -> Bool -> Integer -> Float
  q3 9.6 False 8   = Infinity
  q3 9.6 True  121 = -0.0    
  q3 _   _     _   = 8.6     

  q4 :: Char -> String -> Float
  q4 'r' "foo" = 3.5 
  q4 'c' "tey" = 92.0
  q4 _   _     = 78.0

  q5 :: [Integer] -> [Float] -> Integer
  q5 [5]   [8.2,0.0] = 210
  q5 [9,5] [8.2,9.0] = 21 
  q5 _     _         = 7  
DONE!
