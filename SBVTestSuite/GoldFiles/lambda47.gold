** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s1 () Int 5)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int)
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ;; -- user given: sumToN [Recursive]
[GOOD] (define-fun-rec sumToN ((l1_s0 Int)) Int
                          (let ((l1_s1 0))
                          (let ((l1_s3 1))
                          (let ((l1_s2 (<= l1_s0 l1_s1)))
                          (let ((l1_s4 (- l1_s0 l1_s3)))
                          (let ((l1_s5 (sumToN l1_s4)))
                          (let ((l1_s6 (+ l1_s0 l1_s5)))
                          (let ((l1_s7 (ite l1_s2 l1_s1 l1_s6)))
                          l1_s7))))))))
[GOOD] ; --- preQuantifier assignments ---
[GOOD] (define-fun s2 () Int (sumToN s1))
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] ; --- arrayDelayeds ---
[GOOD] ; --- arraySetups ---
[GOOD] ; --- formula ---
[GOOD] ; --- postQuantifier assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; -- finalAssert ---
[GOOD] (assert s3)
[GOOD] (declare-fun s4 () Int)
[GOOD] (define-fun s5 () Bool (= s2 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 15))
[SEND] (get-value (s4))
[RECV] ((s4 15))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
  s0 = 15 :: Integer
  s4 = 15 :: Integer
