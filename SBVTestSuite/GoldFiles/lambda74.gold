** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- top level inputs ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "x1"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "x2"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "x3"
[GOOD] (declare-fun s3 () Int) ; tracks user variable "x4"
[GOOD] (declare-fun s4 () Int) ; tracks user variable "x5"
[GOOD] ; --- constant tables ---
[GOOD] ; --- non-constant tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user defined functions ---
[GOOD] ; --- assignments ---
[GOOD] (define-fun s5 () Bool (forall ((l1_s0 Int)) (exists ((l1_s1 Int))
         (let ((l1_s2 (+ s1 s2)))
         (let ((l1_s3 (+ s3 l1_s2)))
         (let ((l1_s4 (+ s4 l1_s3)))
         (let ((l1_s5 (+ l1_s0 l1_s4)))
         (let ((l1_s6 (+ l1_s1 l1_s5)))
         (let ((l1_s7 (<= s0 l1_s6)))
         l1_s7)))))))))
[GOOD] ; --- arrayDelayeds ---
[GOOD] ; --- arraySetups ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; --- formula ---
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 0))
[SEND] (get-value (s1))
[RECV] ((s1 0))
[SEND] (get-value (s2))
[RECV] ((s2 0))
[SEND] (get-value (s3))
[RECV] ((s3 0))
[SEND] (get-value (s4))
[RECV] ((s4 0))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
Satisfiable. Model:
  x1 = 0 :: Integer
  x2 = 0 :: Integer
  x3 = 0 :: Integer
  x4 = 0 :: Integer
  x5 = 0 :: Integer
