** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-option :model.inline_def  true      )
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s1 () (Seq Int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq Int))
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- preQuantifier assignments ---
[GOOD] (define-fun s2 () (Seq Int) (seq.map (lambda ((l1_s0 Int))
          (let ((l1_s1 2))
          (let ((l1_s2 (+ l1_s0 l1_s1)))
          l1_s2))) s1))
[GOOD] (define-fun s3 () (Seq Int) (seq.map (lambda ((l1_s0 Int))
          (let ((l1_s1 1))
          (let ((l1_s2 (+ l1_s0 l1_s1)))
          l1_s2))) s2))
[GOOD] (define-fun s4 () Bool (= s0 s3))
[GOOD] ; --- arrayDelayeds ---
[GOOD] ; --- arraySetups ---
[GOOD] ; --- formula ---
[GOOD] ; --- postQuantifier assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; -- finalAssert ---
[GOOD] (assert s4)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit 4) (seq.unit 5) (seq.unit 6) (seq.unit 7) (seq.unit 8))))
*** Solver   : Z3
*** Exit code: ExitSuccess

RESULT:
Satisfiable. Model:
  s0 = [4,5,6,7,8] :: [Integer]
