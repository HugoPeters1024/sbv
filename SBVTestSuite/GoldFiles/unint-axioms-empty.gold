** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has user-defined sorts, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] (declare-sort Thing 0)  ; N.B. Uninterpreted sort.
[GOOD] (declare-fun Thing_witness () Thing)
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s0 () Thing Thing_witness)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s2 () Thing)
[GOOD] (declare-fun s3 () Thing)
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] (declare-fun thingCompare (Thing Thing) Bool)
[GOOD] (declare-fun thingMerge (Thing Thing) Thing)
[GOOD] ; --- user given axioms ---
[GOOD] ;; -- user given axiom: thingCompare is reflexive
[GOOD] (assert (forall ((l1_s0 Thing))
                  (let ((l1_s1 (thingCompare l1_s0 l1_s0)))
                  l1_s1)))
[GOOD] ;; -- user given axiom: thingMerge produces a new, distinct thing
[GOOD] (assert (forall ((l1_s0 Thing) (l1_s1 Thing))
                  (let ((l1_s2 (thingMerge l1_s0 l1_s1)))
                  (let ((l1_s3 (distinct l1_s0 l1_s2)))
                  l1_s3))))
[GOOD] ; --- preQuantifier assignments ---
[GOOD] (define-fun s1 () Thing (thingMerge s0 s0))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s5 () Bool (not s4))
[GOOD] (define-fun s6 () Bool (thingCompare s2 s3))
[GOOD] (define-fun s7 () Bool (or s5 s6))
[GOOD] ; --- arrayDelayeds ---
[GOOD] ; --- arraySetups ---
[GOOD] ; --- formula ---
[GOOD] ; --- postQuantifier assignments ---
[GOOD] ; --- delayedEqualities ---
[GOOD] ; -- finalAssert ---
[GOOD] (assert (not s7))
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL:True
DONE!
