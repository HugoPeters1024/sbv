-----------------------------------------------------------------------------
-- |
-- Module    : Data.SBV.Utils.PrettyNum
-- Copyright : (c) Matt Peddie
--                 Levent Erkok
-- License   : BSD3
-- Maintainer: erkokl@gmail.com
-- Stability : experimental
--
-- Conversion bounds for floating to integral types. This file is 
-- automatically generated by buildUtils/generateBounds.hs.
--
-- Please DO NOT modify directly.
-----------------------------------------------------------------------------

{-# LANGUAGE HexFloatLiterals #-}

module Data.SBV.Utils.FloatConversionBounds (conversionBounds) where

import Data.SBV.Core.Kind     (Kind(..))
import Data.SBV.Core.Symbolic (RoundingMode(..))

-- | For each target type and rounding mode, determine the valid conversion bounds from floats and doubles.
conversionBounds :: [((Kind, RoundingMode), ((Float, Float), (Double, Double)))]
conversionBounds = [
    ((KBounded False 8 , RoundNearestTiesToEven), ((-0x1p-1       , 0x1.fefffep7 ), (-0x1p-1               , 0x1.fefffffffffffp7  )))
  , ((KBounded False 8 , RoundNearestTiesToAway), ((-0x1.fffffep-2, 0x1.fefffep7 ), (-0x0.fffffffffffff8p-1, 0x1.fefffffffffffp7  )))
  , ((KBounded False 8 , RoundTowardPositive   ), ((-0x1.fffffep-1, 0x1.fep7     ), (-0x1.fffffffffffffp-1 , 0x1.fep7             )))
  , ((KBounded False 8 , RoundTowardNegative   ), ((-0x0p+0       , 0x1.fffffep7 ), (-0x0p+0               , 0x1.fffffffffffffp7  )))
  , ((KBounded False 8 , RoundTowardZero       ), ((-0x1.fffffep-1, 0x1.fffffep7 ), (-0x1.fffffffffffffp-1 , 0x1.fffffffffffffp7  )))
  , ((KBounded False 16, RoundNearestTiesToEven), ((-0x1p-1       , 0x1.fffefep15), (-0x1p-1               , 0x1.fffefffffffffp15 )))
  , ((KBounded False 16, RoundNearestTiesToAway), ((-0x1.fffffep-2, 0x1.fffefep15), (-0x0.fffffffffffff8p-1, 0x1.fffefffffffffp15 )))
  , ((KBounded False 16, RoundTowardPositive   ), ((-0x1.fffffep-1, 0x1.fffep15  ), (-0x1.fffffffffffffp-1 , 0x1.fffep15          )))
  , ((KBounded False 16, RoundTowardNegative   ), ((-0x0p+0       , 0x1.fffffep15), (-0x0p+0               , 0x1.fffffffffffffp15 )))
  , ((KBounded False 16, RoundTowardZero       ), ((-0x1.fffffep-1, 0x1.fffffep15), (-0x1.fffffffffffffp-1 , 0x1.fffffffffffffp15 )))
  , ((KBounded False 32, RoundNearestTiesToEven), ((-0x1p-1       , 0x1p32       ), (-0x1p-1               , 0x1.fffffffefffffp31 )))
  , ((KBounded False 32, RoundNearestTiesToAway), ((-0x1.fffffep-2, 0x1p32       ), (-0x0.fffffffffffff8p-1, 0x1.fffffffefffffp31 )))
  , ((KBounded False 32, RoundTowardPositive   ), ((-0x1.fffffep-1, 0x1p32       ), (-0x1.fffffffffffffp-1 , 0x1.fffffffep31      )))
  , ((KBounded False 32, RoundTowardNegative   ), ((-0x0p+0       , 0x1p32       ), (-0x0p+0               , 0x1.fffffffffffffp31 )))
  , ((KBounded False 32, RoundTowardZero       ), ((-0x1.fffffep-1, 0x1p32       ), (-0x1.fffffffffffffp-1 , 0x1.fffffffffffffp31 )))
  , ((KBounded False 64, RoundNearestTiesToEven), ((-0x1p-1       , 0x1p64       ), (-0x1p-1               , 0x1p64               )))
  , ((KBounded False 64, RoundNearestTiesToAway), ((-0x1.fffffep-2, 0x1p64       ), (-0x0.fffffffffffff8p-1, 0x1p64               )))
  , ((KBounded False 64, RoundTowardPositive   ), ((-0x1.fffffep-1, 0x1p64       ), (-0x1.fffffffffffffp-1 , 0x1p64               )))
  , ((KBounded False 64, RoundTowardNegative   ), ((-0x0p+0       , 0x1p64       ), (-0x0p+0               , 0x1p64               )))
  , ((KBounded False 64, RoundTowardZero       ), ((-0x1.fffffep-1, 0x1p64       ), (-0x1.fffffffffffffp-1 , 0x1p64               )))
  , ((KBounded True  8 , RoundNearestTiesToEven), ((-0x1.01p7     , 0x1.fdfffep6 ), (-0x1.01p7             , 0x1.fdfffffffffffp6  )))
  , ((KBounded True  8 , RoundNearestTiesToAway), ((-0x1.00fffep7 , 0x1.fdfffep6 ), (-0x1.00fffffffffffp7  , 0x1.fdfffffffffffp6  )))
  , ((KBounded True  8 , RoundTowardPositive   ), ((-0x1.01fffep7 , 0x1.fcp6     ), (-0x1.01fffffffffffp7  , 0x1.fcp6             )))
  , ((KBounded True  8 , RoundTowardNegative   ), ((-0x1p7        , 0x1.fffffep6 ), (-0x1p7                , 0x0.fffffffffffff8p7 )))
  , ((KBounded True  8 , RoundTowardZero       ), ((-0x1.01fffep7 , 0x1.fffffep6 ), (-0x1.01fffffffffffp7  , 0x0.fffffffffffff8p7 )))
  , ((KBounded True  16, RoundNearestTiesToEven), ((-0x1.0001p15  , 0x1.fffdfep14), (-0x1.0001p15          , 0x1.fffdfffffffffp14 )))
  , ((KBounded True  16, RoundNearestTiesToAway), ((-0x1.0000fep15, 0x1.fffdfep14), (-0x1.0000fffffffffp15 , 0x1.fffdfffffffffp14 )))
  , ((KBounded True  16, RoundTowardPositive   ), ((-0x1.0001fep15, 0x1.fffcp14  ), (-0x1.0001fffffffffp15 , 0x1.fffcp14          )))
  , ((KBounded True  16, RoundTowardNegative   ), ((-0x1p15       , 0x1.fffffep14), (-0x1p15               , 0x0.fffffffffffff8p15)))
  , ((KBounded True  16, RoundTowardZero       ), ((-0x1.0001fep15, 0x1.fffffep14), (-0x1.0001fffffffffp15 , 0x0.fffffffffffff8p15)))
  , ((KBounded True  32, RoundNearestTiesToEven), ((-0x1p31       , 0x1p31       ), (-0x1.00000001p31      , 0x0.fffffffefffff8p31)))
  , ((KBounded True  32, RoundNearestTiesToAway), ((-0x1p31       , 0x1p31       ), (-0x1.00000000fffffp31 , 0x0.fffffffefffff8p31)))
  , ((KBounded True  32, RoundTowardPositive   ), ((-0x1p31       , 0x1p31       ), (-0x1.00000001fffffp31 , 0x0.fffffffep31      )))
  , ((KBounded True  32, RoundTowardNegative   ), ((-0x1p31       , 0x1p31       ), (-0x1p31               , 0x0.fffffffffffff8p31)))
  , ((KBounded True  32, RoundTowardZero       ), ((-0x1p31       , 0x1p31       ), (-0x1.00000001fffffp31 , 0x0.fffffffffffff8p31)))
  , ((KBounded True  64, RoundNearestTiesToEven), ((-0x1p63       , 0x1p63       ), (-0x1p63               , 0x1p63               )))
  , ((KBounded True  64, RoundNearestTiesToAway), ((-0x1p63       , 0x1p63       ), (-0x1p63               , 0x1p63               )))
  , ((KBounded True  64, RoundTowardPositive   ), ((-0x1p63       , 0x1p63       ), (-0x1p63               , 0x1p63               )))
  , ((KBounded True  64, RoundTowardNegative   ), ((-0x1p63       , 0x1p63       ), (-0x1p63               , 0x1p63               )))
  , ((KBounded True  64, RoundTowardZero       ), ((-0x1p63       , 0x1p63       ), (-0x1p63               , 0x1p63               )))
  ]
